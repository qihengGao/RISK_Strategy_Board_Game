# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages

#before_script:
#  - hostname
#  - whoami
#  - pwd
#  - ls -la
#  - docker --version

#stages:
#  - build
#  - test
#  - coverage
#  - deploy
#  - test-deployment
#
#
#build:
#  stage: build
#  script: docker build --build-arg LOCAL_USER_ID=`id -u`  --tag citest .
#
#test:
#  stage: test
#  script: scripts/run-tests-in-docker.sh
#  artifacts:
#    paths:
#      - coverage
#
#pages:
# stage: coverage
# dependencies:
#   - test
# script:
#   - mv coverage public/
# artifacts:
#   paths:
#     - public



# Disable the Gradle daemon for Continuous Integration servers as correctness
# is usually a priority over speed in CI environments. Using a fresh
# runtime for each build is more reliable since the runtime is completely
# isolated from any previous builds.
variables:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"

before_script:
  - export GRADLE_USER_HOME=`pwd`/.gradle

build:
  image: eclipse-temurin:11
  stage: build
  script:
    - ./gradlew resolveDependencies
    - ./gradlew --build-cache assemble
  tags:
    - docker
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: push
    paths:
      - build
      - .gradle

clover-report:
  image: eclipse-temurin:11
  stage: test
  script: ./gradlew cloverAggregateReports
  tags:
    - docker
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: pull-push
    paths:
      - build
      - .gradle
  artifacts:
    paths:
      - build/reports/clover/html

coverage-summary:
  image: python:3.7-alpine3.14
  stage: test
  script:
    - pip3 install bs4
    - ls -a
    - python3 scripts/clover.py
  tags:
    - docker
  needs:
    - clover-report
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: pull
    paths:
      - build