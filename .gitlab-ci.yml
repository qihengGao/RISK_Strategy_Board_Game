# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages

# Disable the Gradle daemon for Continuous Integration servers as correctness
# is usually a priority over speed in CI environments. Using a fresh
# runtime for each build is more reliable since the runtime is completely
# isolated from any previous builds.

stages:
  - build
  - test
  - deploy
  - test-deploy
  - uiTest
  - uiTest_report



stop_production_server:
  stage: .pre
  tags:
    - vcm25354Deploy
  script:
    - ls
    - docker kill risk-game-apiserver || true
    - docker rm risk-game-apiserver || true
    - docker kill risk-game-webserver || true
    - docker rm risk-game-webserver || true
  only:
    - dev

stop_test_server:
  stage: .pre
  tags:
    - test-ssh
  script:
    - ls
    - docker kill risk-game-apiserver_test || true
    - docker rm risk-game-apiserver_test || true
    - docker kill risk-game-webserver_test || true
    - docker rm risk-game-webserver_test || true

build_for_test:
  image: gradle:7.4.1-jdk17
  stage: build
  script:
    - gradle resolveDependencies
    - gradle --build-cache assemble
    - ls -al
  tags:
    - docker
  needs:
    - stop_test_server
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: push
    paths:
      - build
      - .gradle
      - apiserver/build

build_for_production:
  stage: build
  needs:
    - stop_production_server
  script:
    - ls -al
    - docker run --rm --user $(id -u):$(id -g) -v $(pwd)/:/ece651-risk gradle:7.4.1-jdk17 /bin/bash -c "cd /ece651-risk; ls -al; gradle resolveDependencies; gradle --build-cache assemble"
    - ls -al
  tags:
    - vcm25354Deploy
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: push
    paths:
      - apiserver/build
  only:
    - dev


deploy_production_server:
  stage: deploy
  tags:
    - vcm25354Deploy
  needs:
    - build_for_production
  script:
    - ls scripts
    - docker run -d --name risk-game-apiserver --user $(id -u):$(id -g) -p 8080:8080  -v $(pwd):/ece651-risk gradle:7.4.1-jdk17 /bin/bash -c "cd /ece651-risk;ls -al; java -jar ./apiserver/build/libs/apiserver-0.0.1-SNAPSHOT.jar"
    - docker run -d --name risk-game-webserver --user $(id -u):$(id -g)  -e npm_config_cache=/risk --network="host" -v $(pwd):/risk node:16 /risk/scripts/deployWebServer.sh
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: pull
    paths:
      - apiserver/build
  only:
    - dev

verify_deploy_production_server:
  stage: test-deploy
  tags:
    - vcm25354Deploy
  variables:
    GIT_STRATEGY: none
  needs:
    - deploy_production_server
  script:
    - ls
    - ./scripts/test-deploy.sh
  only:
    - dev

deploy_test_server:
  stage: deploy
  tags:
    - test-ssh
  needs:
    - build_for_test
  script:
    - sed -i "s/localhost/host.docker.internal/g" ./webserver/package.json
    - docker run -d --name risk-game-apiserver_test --user $(id -u):$(id -g) -p 8080:8080  -v $(pwd):/ece651-risk gradle:7.4.1-jdk17 /bin/bash -c "cd /ece651-risk;ls -al; cd apiserver; gradle bootRun"
    - docker run -d --name risk-game-webserver_test --user $(id -u):$(id -g) -p 8081:8081  -e npm_config_cache=/risk --add-host host.docker.internal:host-gateway -v $(pwd):/risk node:16 /bin/bash -c "cd /risk;ls -al; cd webserver;npm ci; npm run start_rewired"
    - docker run -d --name selenium_server -p 4444:4444 -p 7900:7900 --add-host host.docker.internal:host-gateway --shm-size="2g" -v /ui_test_downlaod:/home/seluser/Downloads selenium/standalone-chrome:4.1.3-20220327 || true
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: pull
    paths:
      - apiserver/build

verify_deploy_test_server:
  stage: test-deploy
  variables:
    GIT_STRATEGY: none
  tags:
    - test-ssh
  needs:
    - deploy_test_server
  script:
    - ls
    - ./scripts/test-deploy.sh
  timeout: 2m


selenium_web_ui_test:
  image: node:16
  stage: uiTest
  variables:
    GIT_STRATEGY: clone
    GIT_CLEAN_FLAGS: none
  needs:
    - verify_deploy_test_server
  tags:
    - docker
  script:
    - npm install -g selenium-side-runner
    - ls -al
    - ls -al scripts
    - cat ./scripts/UI_test_scripts/test_login.side
    - selenium-side-runner --server http://host.docker.internal:4444/wd/hub --base-url http://host.docker.internal:8081 ./scripts/UI_test_scripts/test_login.side || true

generate_clover_report:
 image: gradle:7.4.1-jdk17
 stage: test
 script:
   - gradle cloverAggregateReports
   - mkdir coverageout
   - cp -r build/reports/clover/html/* coverageout/
 tags:
   - docker
 needs:
   - build_for_test
 cache:
   key: "$CI_COMMIT_REF_NAME"
   policy: pull-push
   paths:
     - build
     - .gradle
 artifacts:
   paths:
     - coverageout

generate_coverage_summary:
 image: python:3.7-alpine3.14
 stage: test
 script:
   - pip3 install bs4
   - python3 scripts/clover.py
 tags:
   - docker
 needs:
   - generate_clover_report
 cache:
   key: "$CI_COMMIT_REF_NAME"
   policy: pull
   paths:
     - build
     - .gradle

generate_js_coverage_report:
  stage: uiTest_report
  variables:
    GIT_STRATEGY: none
  tags:
    - test-ssh
  needs:
    - selenium_web_ui_test
  script:
    - cd webserver
    - ls -al /ui_test_downlaod
    - ls -al
    - mkdir tmp
    - mv  -v /ui_test_downlaod/* tmp
    - sed -i -- 's/\/risk\/webserver/\/home\/gitlab-runner\/builds\/PasKz8W2\/0\/ece651-group1\/ece651-risk\/webserver/g' tmp/*
    - nyc report -t tmp --reporter=html
    - ls -al
  artifacts:
    paths:
      - webserver/coverage
  timeout: 2m

pages:
  image: alpine:3.14
  stage: test
  tags:
    - docker
  needs:
    - generate_clover_report
  script:
    - mkdir .public
    - cp -r build/reports/clover/html/* .public/
    - mv .public public
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: pull
    paths:
      - build
  artifacts:
    paths:
      - public
  only:
    - dev


